"""Add updated_at column to all tables

Revision ID: a76449c3b78d
Revises: 0c1bee34ad46
Create Date: 2025-09-10 16:28:23.636423

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'a76449c3b78d'
down_revision: Union[str, None] = '0c1bee34ad46'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('accommodation', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('contract', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('event', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('profile', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('user', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    # ### end Alembic commands ###

    # ### Manually add triggers for onupdate functionality ###
    op.execute("""
    CREATE OR REPLACE FUNCTION update_updated_at_column()
    RETURNS TRIGGER AS $$
    BEGIN
        NEW.updated_at = NOW();
        RETURN NEW;
    END;
    $$ language 'plpgsql';
    """)

    op.execute("""
    CREATE TRIGGER update_accommodation_updated_at
    BEFORE UPDATE ON accommodation
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
    """)

    op.execute("""
    CREATE TRIGGER update_contract_updated_at
    BEFORE UPDATE ON contract
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
    """)

    op.execute("""
    CREATE TRIGGER update_event_updated_at
    BEFORE UPDATE ON event
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
    """)

    op.execute("""
    CREATE TRIGGER update_profile_updated_at
    BEFORE UPDATE ON profile
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
    """)

    op.execute("""
    CREATE TRIGGER update_user_updated_at
    BEFORE UPDATE ON "user"
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
    """)


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('user', 'updated_at')
    op.drop_column('profile', 'updated_at')
    op.drop_column('event', 'updated_at')
    op.drop_column('contract', 'updated_at')
    op.drop_column('accommodation', 'updated_at')
    # ### end Alembic commands ###

    # ### Manually drop triggers ###
    op.execute("DROP TRIGGER update_accommodation_updated_at ON accommodation;")
    op.execute("DROP TRIGGER update_contract_updated_at ON contract;")
    op.execute("DROP TRIGGER update_event_updated_at ON event;")
    op.execute("DROP TRIGGER update_profile_updated_at ON profile;")
    op.execute("DROP TRIGGER update_user_updated_at ON \"user\";")
    op.execute("DROP FUNCTION update_updated_at_column();")
